security:
  # https://symfony.com/doc/current/security/experimental_authenticators.html
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    Labstag\Entity\User:
            algorithm: auto
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    labstag_user_provider:
      entity:
        class: Labstag\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      switch_user: true
      lazy: true
      provider: labstag_user_provider
      user_checker: Labstag\Security\UserChecker
      custom_authenticator:
        - Labstag\Security\LoginFormAuthenticator
        - Labstag\Security\OauthAuthenticator
      remember_me:
        secret:   '%kernel.secret%'
        lifetime: 604800 # 1 week in seconds
        remember_me_parameter: "login[remember_me]"
        path:     /
        domain: ~
        token_provider:
          doctrine: true
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication
      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login, roles: PUBLIC_ACCESS }
    - { path: ^/lost, roles: PUBLIC_ACCESS }
    - { path: ^/admin, roles: ROLE_USER }
    - { path: ^/gestion, roles: ROLE_USER }
    - { path: ^/efconnect, role: ROLE_USER }
    - { path: ^/elfinder, role: ROLE_USER }
    # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

